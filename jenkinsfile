def tomcatServerUrl = "http://172.173.216.209:8080/"
//restrict pipeline into running in a container
pipeline {
  agent any
  stages {
    //Use this code for online pipeline script option
     /* stage('Clone') {
      steps {
        //download code from github
        git 'https://github.com/harihsk44/CICDweb.git'
      }

// g
    }*/
    stage('Build-test') {
      steps {
        //Run the maven build
        // sh '"mvn" -Dmaven.test.failure.ignore clean install
        // docker currently creates an image during runtime 
        script{
            docker.image('maven:latest').inside('-u root -v $PWD:/app') {
            //sh '"mvn" -Dmaven.test.failure.ignore clean install'
            sh 'mvn clean install'
            sh 'mvn compile'
            //sh 'mvn clean package'
            // configured maven compiler and clear the target directory
  
            // selenium testing
            sh 'mvn test -Dbrowser=localchrome'
            // tests mvn code in localchrome browser 

            publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '', reportFiles: 'target/SampleWebJorge/index.jsp', reportName: 'Pipeline', reportTitles: '', useWrapperFileDirectly: true])
            // publishes the results back to jenkins 
        }
        }
        
      }
    }


    
    /*
    stage('Merging'){
        steps{
            // Merge Test branch to main branch
            // Might not need this
        }
    }
    commented out
    */




// realised that i cant reuse the same docker cloud for tomcat somehow

    stage('Deploy') {
        /*
       agent {
        docker {
            image 'tomcat:latest'
            args '-u root -v'
            //args '-u root -v /root/.m3:/root/.m3'
        }
      // docker changes
      }
      */
      
      
      steps {
        //deploy war on tomcat server
        deploy adapters: [tomcat8(url: "${tomcatServerUrl}",
            credentialsId: 'tomcat-credentials')],
          war: 'target/*.war',
          contextPath: 'pipeline-app'

// deploy war file into a docker container
// i think need install tomcat on the container as well

      }
    }

    stage('Ansible'){
        steps{
          // Ansible command

          /*
          sshagent(credentials : ['ansible']) {
            sh 'ssh -v azureuser@4.194.3.250'
            sh 'ansible-playbook hari.yml'
          }
          */

          sh 'curl -LJO https://raw.githubusercontent.com/harihsk44/CICDweb/testalt/ansibleplaybook.yml'
          // sh 'curl -LJO https://raw.githubusercontent.com/harihsk44/CICDweb/testalt/AnsibleHost_key.pem'
          // Pulls playbook file from github (installed ansible host public key manually) 

          sh 'ansible-playbook ansibleplaybook.yml -vvv -u azureuser --key-file "/var/lib/jenkins/.ssh/AnsibleHost_key.pem" '
          // specified ansible host Public key file manually and azureuser as user in ansible host 
        }
    }


  }
post { 
        always { 
            cleanWs()
// do an rm -r on /var/lib/jenkins/workspace if any workspace error comes
        }
    }
}
